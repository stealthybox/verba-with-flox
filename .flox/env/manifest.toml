version = 1

[install]

python.pkg-path = "python311"

# Install Weaviate as a vector database
weaviate.pkg-path = "weaviate"
#weaviate.version = "1.25.9"

# Install Ollama as a backend
ollama.pkg-path = "ollama"
#ollama.version = "0.3.5"

# Nice UI for our hook and profile scripts :)
gum.pkg-path = "gum"

# Deps for our service scripts
bash.pkg-path = "bash"
curl.pkg-path = "curl"

# System/C deps
gcc-unwrapped.pkg-path = "gcc-unwrapped"
pkg-config.pkg-path = "pkg-config"
glibc.pkg-path = "glibc"  # glibc only needed on linux builds
glibc.systems = [ "x86_64-linux" , "aarch64-linux"]


[vars]

# The name of the Verba package to install
VERBA_INSTALL_PACKAGE = "goldenverba@git+https://github.com/weaviate/Verba"

# This configures Weaviate, and configures Verba to use it
WEAVIATE_URL_VERBA = "localhost"
WEAVIATE_URL_VERBA_full = "http://localhost:8080" # needed for verba v2.1.0 Custom Deploy UI

# Weaviate data path
PERSISTENCE_DATA_PATH = "./verba-data"

# Leave Weaviate wide open (for now!)
AUTHENTICATION_ANONYMOUS_ACCESS_ENABLED = "true"

# Weaviate query default limit
QUERY_DEFAULTS_LIMIT = "10"

# This configures Verba to use the local Ollama instance
OLLAMA_URL = "http://localhost:11434"

# Our Ollama models
OLLAMA_MODEL = "llama3"
OLLAMA_EMBED_MODEL = "mxbai-embed-large"

# OpenAI configuration
# OPENAI_API_KEY = ""
# OPENAI_BASE_URL = "http://100.0.0.0:8000"

# For other Verba variables that can be set here, see:
# https://github.com/weaviate/Verba/blob/main/goldenverba/.env.example

# Values that are *not* set here can be passed in at activation
# time, like this:
# 
#     `OPENAI_API_KEY="xxx" flox activate -s`

# IMO we don't need both Flox and venv to augment our prompt
VIRTUAL_ENV_DISABLE_PROMPT="1"


# Since Verba is not (yet) in the Flox catalog, we need to
# install it from pypi using a venv

# We can add a hook that makes sure that Verba is installed
# before we try to start it (or use it!)
#
[hook]
on-activate = '''
# If we export this here, it can be used later in 'profiles.common'
export PYTHON_DIR="$FLOX_ENV_CACHE/python"

if [ ! -d "$PYTHON_DIR" ]; then
  gum spin -s globe --title "Creating venv in $PYTHON_DIR..." -- python -m venv "$PYTHON_DIR"
fi

(
  source "$PYTHON_DIR/bin/activate"
  gum spin -s monkey --title "Installing/updating Verba..." -- pip install "$VERBA_INSTALL_PACKAGE"
)
'''


[profile]
common = '''
  # Activate the Python venv
  source "$PYTHON_DIR/bin/activate"
'''


[services]
weaviate.command = "weaviate --host 0.0.0.0 --port 8080 --scheme http"

ollama.command = "ollama serve"

verba.command = """
if [[ "$WEAVIATE_URL_VERBA" != "" ]]; then
  until curl -s "$WEAVIATE_URL_VERBA_full"; do
    echo "waiting for weaviate ..."
    sleep 0.1
  done
fi
"$PYTHON_DIR/bin/verba" start --port 8000 --host 0.0.0.0
"""

models.command = """
# wait for ollama to be ready
until ollama list; do
  sleep 0.1
done

ollama pull "$OLLAMA_MODEL"
ollama pull "$OLLAMA_EMBED_MODEL"
"""


[options]
systems = [
  "aarch64-darwin",
  "aarch64-linux",
  "x86_64-linux",
  "x86_64-darwin",
]
